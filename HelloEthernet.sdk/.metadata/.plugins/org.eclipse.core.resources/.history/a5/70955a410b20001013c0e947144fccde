/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include "platform.h"
#include "xil_printf.h"
#include "xemaclite.h"
#include "sleep.h"

#define PACKET_SIZE 60


XEmacLite MacInstance;
u8 TxFrame[PACKET_SIZE];
u8 mac_addr[6] = {0x00, 0x0A, 0x35, 0x00, 0x01, 0x02};

void MAC_config(){
	XEmacLite_SetMacAddress(&MacInstance, mac_addr);

    u8 dest_mac[6] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};  // Broadcast

    memcpy(&TxFrame[0], dest_mac, 6);                      // Destination MAC

    memcpy(&TxFrame[6], mac_addr, 6);                        // Source MAC

    TxFrame[12] = 0x08;  // Type field high byte (e.g., 0x0800 = IPv4)
    TxFrame[13] = 0x00;  // Type field low byte

    for (int i = 14; i < PACKET_SIZE; i++) {
        TxFrame[i] = 0xAA;  // Payload (fill with dummy data)
    }
}

int main()
{
    init_platform();

    print("Hello World\n\r");

    int status;

    XEmacLite_Initialize(&MacInstance, XPAR_AXI_ETHERNETLITE_0_DEVICE_ID);
    if (status != XST_SUCCESS) {
        xil_printf("Ethernet Lite Init Failed!\r\n");
        return XST_FAILURE;
    }

    xil_printf("Ethernet Lite Initialized!\r\n");

    // Set MAC Address
    XEmacLite_SetMacAddress(&MacInstance, mac_addr);
    MAC_config();

    cleanup_platform();
    while (1){
        status = XEmacLite_Send(&MacInstance, TxFrame, PACKET_SIZE);
        if (status != XST_SUCCESS) {
            xil_printf("Packet send failed!\r\n");
            return XST_FAILURE;
        }
        xil_printf("Packet sent!\r\n");
        usleep(1000000);  // 1 second delay
    }
    return 0;
}
